{"version":3,"sources":["../../../../../git/ctrnn.js/lib/index.js","../../../../../git/ctrnn.js/lib/ctrnn.js","../../../../../git/ctrnn.js/lib/sigmoid.js","components/Settings/index.tsx","components/Network/index.tsx","components/SineWave/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Object","defineProperty","exports","value","CTRNN","ctrnn_1","require","enumerable","get","__assign","this","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","sigmoid_1","nodes","opts","count","Array","from","bias","timeConstant","weights","states","outputs","push","sigmoid","configurable","setNode","index","node","setWeight","to","weight","setBias","setTimeConstant","tick","inputs","dt","getDelta","sum","j","activation","z","Math","pow","exp","Settings","colors","Intent","PRIMARY","SUCCESS","label","props","ctrnn","map","id","min","max","stepSize","intent","onChange","onChangeNode","labelStepSize","onChangeWeight","icon","title","className","React","Component","exampleData","links","Network","monitorHeight","refreshRate","size","width","height","graphData","SineWave","data","color","a","b","enablePoints","enableGridX","enableGridY","theme","textColor","grid","line","stroke","margin","top","bottom","left","right","xScale","x","type","yScale","isInteractive","App","state","frame","fixed","paused","forEach","updateNetwork","updateFixed","setInterval","y","shift","setState","elevation","Elevation","ZERO","bind","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74c973e9.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CTRNN = void 0;\nvar ctrnn_1 = require(\"./ctrnn\");\nObject.defineProperty(exports, \"CTRNN\", { enumerable: true, get: function () { return ctrnn_1.CTRNN; } });\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CTRNN = void 0;\nvar sigmoid_1 = require(\"./sigmoid\");\n/**\n * Continuous-Time Recurrent Neural Network (`CTRNN`) implementation for JS.\n *\n * # Example\n *\n * ```typescript\n * import CTRNN from \"ctrnn.js\";\n * let ctrnn = new CTRNN();\n * ```\n */\nvar CTRNN = /** @class */ (function () {\n    function CTRNN(nodes) {\n        if (nodes === void 0) { nodes = 4; }\n        var opts = { length: nodes };\n        this.count = nodes;\n        this.nodes = Array.from(opts, function () { return ({ bias: 0, timeConstant: 1.0 }); });\n        this.weights = Array.from(opts, function () { return Array.from(opts, function () { return 0; }); });\n        this.states = Array.from(opts, function () { return 0.0; });\n    }\n    Object.defineProperty(CTRNN.prototype, \"outputs\", {\n        get: function () {\n            var outputs = [];\n            for (var i = 0; i < this.count; i++) {\n                outputs.push(sigmoid_1.sigmoid(this.states[i] + this.nodes[i].bias));\n            }\n            return outputs;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /*\n     * TODO:\n     * Replace these `set` methods with a general `setNode` method that takes an\n     * object with `bias` and `timeConstant` attributes, and maybe even `weights`\n     */\n    CTRNN.prototype.setNode = function (index, node) {\n        this.nodes[index] = __assign(__assign({}, this.nodes[index]), node);\n    };\n    // TODO: Documentation\n    CTRNN.prototype.setWeight = function (from, to, weight) {\n        this.weights[to][from] = weight;\n    };\n    // TODO: Documentation\n    CTRNN.prototype.setBias = function (node, bias) {\n        this.nodes[node].bias = bias;\n    };\n    // TODO: Documentation\n    CTRNN.prototype.setTimeConstant = function (node, timeConstant) {\n        this.nodes[node].timeConstant = timeConstant;\n    };\n    // TODO: Documentation\n    CTRNN.prototype.tick = function (inputs, dt) {\n        var states = [];\n        for (var i = 0; i < this.count; i++) {\n            states.push(inputs[i] || (this.states[i] + this.getDelta(i) * dt));\n        }\n        this.states = states;\n    };\n    // TODO: Documentation\n    CTRNN.prototype.getDelta = function (node) {\n        var weights = this.weights[node];\n        var sum = 0;\n        for (var j = 0; j < this.count; j++) {\n            var activation = sigmoid_1.sigmoid(this.states[j] + this.nodes[j].bias);\n            sum += weights[j] * activation;\n        }\n        return (sum - this.states[node]) / this.nodes[node].timeConstant;\n    };\n    return CTRNN;\n}());\nexports.CTRNN = CTRNN;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sigmoid = void 0;\nfunction sigmoid(z) {\n    return Math.pow(1 + Math.exp(-z), -1);\n}\nexports.sigmoid = sigmoid;\n","import { Callout, FormGroup, Intent, Slider, Text } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { Node } from 'ctrnn.js';\nimport \"./index.css\";\n\nexport type Structure = {\n  nodes: Node[],\n  weights: number[][]\n}\n\ntype SettingsProps = {\n  onChangeNode: (id: number, node: Node) => void,\n  onChangeWeight: (from: number, to: number, weight: number) => void,\n  ctrnn: Structure\n};\n\nexport class Settings extends React.Component<SettingsProps, {}> {\n  render() {\n    const colors = [Intent.PRIMARY, Intent.SUCCESS];\n    return <>\n      <FormGroup\n        label=\"Node Biases\"\n      >\n        {this.props.ctrnn.nodes.map((node, id) =>\n          <Slider key={id} value={node.bias}\n            min={-3.0} max={3.0} stepSize={0.001}\n            intent={colors[id]}\n            onChange={value => {\n              this.props.onChangeNode(id,\n                {timeConstant: node.timeConstant, bias: value}\n              );\n            }}\n            />\n        )}\n      </FormGroup>\n      <FormGroup\n        label=\"Node Time Constants\"\n      >\n        {this.props.ctrnn.nodes.map((node, id) =>\n          <Slider key={id} value={node.timeConstant}\n            min={0.001} max={2.0} stepSize={0.001}\n            intent={colors[id]}\n            onChange={value => {\n              this.props.onChangeNode(id,\n                {timeConstant: value, bias: node.bias}\n              );\n            }}\n            />\n        )}\n      </FormGroup>\n      {this.props.ctrnn.weights.map((weights, to) =>\n        <FormGroup\n          label={`Incoming weights to Node ${to}`}\n        >\n          {weights.map((weight, from) =>\n            <Slider key={from + '-' + to} value={weight}\n              labelStepSize={2.5} intent={colors[from]}\n              min={-5.0} max={5.0} stepSize={0.001}\n              onChange={value => {\n                this.props.onChangeWeight(from, to, value);\n              }}\n              />\n          )}\n        </FormGroup>\n      )}\n      <Callout\n        icon=\"help\"\n        title=\"Information\"\n      >\n        <Text className=\"information\">\n\n        </Text>\n      </Callout>\n      </>\n  }\n}\n","import React from \"react\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport { SizeMe } from \"react-sizeme\";\n\nconst exampleData = {\n  nodes:[\n    {\"id\":\"node1\", \"__label\":\"Julia\"},\n    {\"id\":\"node2\", \"__label\":\"Bob\"},\n  ],\n  links:[\n    {\"id\":\"link1\", \"source\":\"node1\", \"target\":\"node2\"}\n  ]\n}\n\nexport class Network extends React.Component<{}, {}> {\n  render() {\n    return <SizeMe\n      monitorHeight\n      refreshRate={32}\n    >{\n      ({ size }) => <ForceGraph2D\n        width={size.width || 100} height={size.height || 100}\n        graphData={exampleData}\n        />\n      }</SizeMe>\n  }\n}\n","import { ResponsiveLineCanvas } from \"@nivo/line\";\nimport React from \"react\";\n\ntype Point = { x: number, y: number };\ntype SineWaveProps = {\n\ta: Point[],\n\tb: Point[]\n};\n\nexport class SineWave extends React.Component<SineWaveProps, {}> {\n\trender() {\n\t\tconst margin = 50;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<ResponsiveLineCanvas\n\t\t\t\t\tdata={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"a\",\n\t\t\t\t\t\t\tcolor: \"rgb(255, 0, 0)\",\n\t\t\t\t\t\t\tdata: this.props.a\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"b\",\n\t\t\t\t\t\t\tcolor: \"rgb(0, 255, 0)\",\n\t\t\t\t\t\t\tdata: this.props.b\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t\tenablePoints={false}\n\t\t\t\t\tenableGridX={true}\n\t\t\t\t\tenableGridY={true}\n\t\t\t\t\tcolors={[\"#137cbd\", \"#0f9960\"]}\n\t\t\t\t\ttheme={{textColor: \"#137cbd\", grid: {line: {stroke: \"#141414\"}}}}\n\t\t\t\t\tmargin={{top: margin, bottom: margin, left: margin, right: margin}}\n\t\t\t\t\txScale={{min: (this.props.a[0] || {x: 0}).x, type: \"linear\"}}\n\t\t\t\t\tyScale={{max: 1, min: 0, type: \"linear\"}}\n\t\t\t\t\tisInteractive={false}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './App.css';\nimport { Card, Elevation } from '@blueprintjs/core';\nimport { Settings, Structure } from './components/Settings';\nimport { Network } from './components/Network';\nimport { SineWave } from './components/SineWave';\nimport { CTRNN, Node } from 'ctrnn.js';\n\ntype Point = { x: number, y: number };\ntype AppState = {\n  frame: number,\n  ctrnn: Structure,\n  data: { a: Point[], b: Point[] },\n  fixed: { a: Point[], b: Point[] }\n}\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    frame: 0,\n    data: { a: [], b: [] },\n    fixed: { a: [], b: [] },\n    ctrnn: {\n      nodes: [\n        { bias: -2.75, timeConstant: 1.0 },\n        { bias: -1.75, timeConstant: 1.0 },\n      ],\n      weights: [\n        [4.5, 1.0],\n        [-1.0, 4.5]\n      ]\n    }\n  };\n  private ctrnn: CTRNN = new CTRNN(2);\n  private paused: boolean = false;\n\n  updateNetwork(ctrnn: CTRNN) {\n    this.state.ctrnn.nodes.forEach((node, index) => {\n      ctrnn.setNode(index, node);\n    });\n    this.state.ctrnn.weights.forEach((weights, to) => {\n      weights.forEach((weight, from) => {\n        ctrnn.setWeight(from, to, weight);\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateNetwork(this.ctrnn);\n    this.updateFixed();\n\n    const size = 500;\n    setInterval(() => {\n      if (this.paused) return;\n      this.ctrnn.tick([], 0.2);\n\n      const outputs = this.ctrnn.outputs;\n      const data = this.state.data;\n      data.a.push({x: this.state.frame, y: outputs[0]});\n      data.b.push({x: this.state.frame, y: outputs[1]});\n      if (data.a.length > size) data.a.shift();\n      if (data.b.length > size) data.b.shift();\n\n      this.setState({ data: data, frame: this.state.frame + 1 });\n    }, 5);\n  }\n\n  onClick() {\n    this.paused = !this.paused;\n  }\n\n  onChangeNode(id: number, node: Node) {\n    this.state.ctrnn.nodes[id] = node;\n    this.ctrnn.setNode(id, node);\n    this.updateFixed();\n  }\n\n  onChangeWeight(from: number, to: number, weight: number) {\n    this.state.ctrnn.weights[to][from] = weight;\n    this.ctrnn.setWeight(from, to, weight);\n    this.updateFixed();\n  }\n\n  updateFixed() {\n    let ctrnn = new CTRNN(2);\n    this.updateNetwork(ctrnn);\n    const data: { a: Point[], b: Point[] } = {a: [], b: []};\n    for (let i = 0; i < 500; i++) {\n      ctrnn.tick([], 0.2);\n      if (i % 5 === 0) {\n        const outputs = ctrnn.outputs;\n        data.a.push({x: i, y: outputs[0]});\n        data.b.push({x: i, y: outputs[1]});\n      }\n    }\n    this.setState({fixed: data});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Dashboard\">\n          <div className=\"Settings\">\n            <Card elevation={Elevation.ZERO}>\n              <Settings\n                ctrnn={this.state.ctrnn}\n                onChangeNode={this.onChangeNode.bind(this)}\n                onChangeWeight={this.onChangeWeight.bind(this)}\n              />\n            </Card>\n          </div>\n          <div className=\"Network\">\n            <Card elevation={Elevation.ZERO}>\n              <Network />\n            </Card>\n          </div>\n          <div className=\"SineWaveLive\" onClick={this.onClick.bind(this)}>\n            <Card elevation={Elevation.ZERO}>\n              <SineWave a={this.state.data.a} b={this.state.data.b} />\n            </Card>\n          </div>\n          <div className=\"SineWave\">\n            <Card elevation={Elevation.ZERO}>\n              <SineWave a={this.state.fixed.a} b={this.state.fixed.b} />\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}