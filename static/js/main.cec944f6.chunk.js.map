{"version":3,"sources":["../../ctrnn.js/lib/index.js","../../ctrnn.js/lib/ctrnn.js","../../ctrnn.js/lib/sigmoid.js","components/Settings/index.tsx","components/Network/index.tsx","components/SineWave/index.tsx","components/PhasePortrait/index.tsx","sigmoid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Object","defineProperty","exports","value","Ctrnn","ctrnn_1","require","enumerable","get","sigmoid_1","nodes","opts","length","this","Array","from","bias","timeConstant","weights","index","node","assign","to","weight","frame","sigmoid","size","Error","map","output","voltage","inverseSigmoid","inputs","dt","final","i","push","getDelta","sum","j","activation","z","Math","pow","exp","x","min","max","log","Settings","colors","Intent","PRIMARY","SUCCESS","label","props","ctrnn","id","stepSize","labelStepSize","intent","onChange","onChangeNode","labelValues","onChangeWeight","WARNING","stepsize","onChangeStepsize","React","Component","exampleData","links","Network","monitorHeight","refreshRate","width","height","graphData","SineWave","data","color","a","b","axisLeft","legend","legendPosition","legendOffset","axisBottom","enablePoints","enableGridX","enableGridY","theme","textColor","grid","line","stroke","margin","top","bottom","left","right","xScale","type","yScale","isInteractive","PhasePortrait","canvasRef","divRef","createRef","element","ref","className","onClick","click","bind","draw","position","canvas","current","y","center","offset","offsetLeft","offsetTop","event","pos","screenToGraphSpace","clientX","clientY","onChangeStart","context","getContext","clearRect","origin","translate","scale","lineWidth","beginPath","t","moveTo","lineTo","strokeStyle","forEach","row","point","points","resetTransform","p","toFixed","toString","strokeText","div","component","resize","clientWidth","clientHeight","style","window","addEventListener","field","steps","getField","App","state","fixed","phaseData","paused","start","animating","setNode","setWeight","updateNetwork","update","app","old","dist","hypot","duration","round","requestAnimationFrame","animate","setState","frameFromOutput","initial","getOutputs","last_x","s","tick","outputs","floor","last","next","console","biased","control","diff","mag","updateFixed","updatePhase","elevation","Elevation","ZERO","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cec944f6.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ctrnn = void 0;\nvar ctrnn_1 = require(\"./ctrnn\");\nObject.defineProperty(exports, \"Ctrnn\", { enumerable: true, get: function () { return ctrnn_1.Ctrnn; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ctrnn = void 0;\nconst sigmoid_1 = require(\"./sigmoid\");\n/**\n * Continuous-Time Recurrent Neural Network (`CTRNN`) implementation for JS.\n *\n * # Example\n *\n * ```typescript\n * import Ctrnn from \"ctrnn.js\";\n * let ctrnn = new Ctrnn();\n * ```\n */\nclass Ctrnn {\n    constructor(nodes = 4) {\n        let opts = { length: nodes };\n        this.nodes = Array.from(opts, () => ({ bias: 0, timeConstant: 1.0 }));\n        this.weights = Array.from(opts, () => Array.from(opts, () => 0));\n    }\n    /**\n     * Get the number of nodes in the network\n     */\n    get size() { return this.nodes.length; }\n    /**\n     * Set the `bias` and `timeConstant` parameters of a given node\n     */\n    setNode(index, node) {\n        this.nodes[index] = Object.assign(Object.assign({}, this.nodes[index]), node);\n    }\n    /**\n     * Set the the given weight from one node to another\n     */\n    setWeight(from, to, weight) {\n        this.weights[to][from] = weight;\n    }\n    /**\n     * Get the output activation of a specific node\n     */\n    getOutput(frame, node) {\n        return sigmoid_1.sigmoid(frame[node] + this.nodes[node].bias);\n    }\n    /**\n     * Get the output activations of all nodes\n     */\n    getOutputs(frame) {\n        if (frame.length != this.size)\n            throw new Error();\n        return this.nodes.map((node, index) => sigmoid_1.sigmoid(frame[index] + node.bias));\n    }\n    frameFromOutput(output) {\n        if (output.length != this.size)\n            throw new Error();\n        return output.map((voltage, index) => sigmoid_1.inverseSigmoid(voltage) - this.nodes[index].bias);\n    }\n    // TODO: Documentation\n    tick(frame, inputs, dt) {\n        const final = [];\n        for (let i = 0; i < this.size; i++) {\n            final.push(inputs[i] || (frame[i] + this.getDelta(frame, i) * dt));\n        }\n        return final;\n    }\n    // TODO: Documentation\n    getDelta(frame, node) {\n        const weights = this.weights[node];\n        let sum = 0;\n        for (let j = 0; j < this.size; j++) {\n            const activation = sigmoid_1.sigmoid(frame[j] + this.nodes[j].bias);\n            sum += weights[j] * activation;\n        }\n        return (sum - frame[node]) / this.nodes[node].timeConstant;\n    }\n    static newFrame(size) {\n        return Array.from({ length: size }, () => 0.0);\n    }\n}\nexports.Ctrnn = Ctrnn;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inverseSigmoid = exports.sigmoid = void 0;\nfunction sigmoid(z) {\n    return Math.pow(1 + Math.exp(-z), -1);\n}\nexports.sigmoid = sigmoid;\nfunction inverseSigmoid(z) {\n    const x = Math.min(Math.max(z, 0.01), 0.99);\n    return Math.log(x / (1 - x));\n}\nexports.inverseSigmoid = inverseSigmoid;\n","import { Callout, FormGroup, Intent, Slider, Text } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { Node } from 'ctrnn.js';\nimport \"./index.css\";\n\nexport type Structure = {\n  nodes: Node[],\n  weights: number[][]\n}\n\ntype SettingsProps = {\n  onChangeNode: (id: number, node: Node) => void,\n  onChangeWeight: (from: number, to: number, weight: number) => void,\n  onChangeStepsize: (step: number) => void,\n  stepsize: number,\n  ctrnn: Structure\n};\n\nexport class Settings extends React.Component<SettingsProps, {}> {\n  render() {\n    const colors = [Intent.PRIMARY, Intent.SUCCESS];\n    return <>\n      <FormGroup\n        label=\"Node Biases\"\n      >\n        {this.props.ctrnn.nodes.map((node, id) =>\n          <Slider key={id} value={node.bias}\n            min={-16.0} max={16.0} stepSize={0.001}\n            labelStepSize={4}\n            intent={colors[id]}\n            onChange={value => {\n              this.props.onChangeNode(id,\n                {timeConstant: node.timeConstant, bias: value}\n              );\n            }}\n            />\n        )}\n      </FormGroup>\n      <FormGroup\n        label=\"Node Time Constants\"\n      >\n        {this.props.ctrnn.nodes.map((node, id) =>\n          <Slider key={id} value={node.timeConstant}\n            min={0.5} max={10.0} stepSize={0.001}\n            labelValues={[0.5, 2, 4, 6, 8, 10]}\n            intent={colors[id]}\n            onChange={value => {\n              this.props.onChangeNode(id,\n                {timeConstant: value, bias: node.bias}\n              );\n            }}\n            />\n        )}\n      </FormGroup>\n      {this.props.ctrnn.weights.map((weights, to) =>\n        <FormGroup\n          label={`Incoming weights to Node ${to}`}\n        >\n          {weights.map((weight, from) =>\n            <Slider key={from + '-' + to} value={weight}\n              labelStepSize={4} intent={colors[from]}\n              min={-16.0} max={16.0} stepSize={0.001}\n              onChange={value => {\n                this.props.onChangeWeight(from, to, value);\n              }}\n              />\n          )}\n        </FormGroup>\n      )}\n      <FormGroup label=\"Step size\">\n        <Slider min={0.01} max={1.0} stepSize={0.001} intent={Intent.WARNING}\n          labelValues={[0.01, 0.25, 0.5, 0.75, 1]}\n          value={this.props.stepsize} onChange={this.props.onChangeStepsize}/>\n      </FormGroup>\n      </>\n  }\n}\n","import React from \"react\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport { SizeMe } from \"react-sizeme\";\n\nconst exampleData = {\n  nodes:[\n    {\"id\":\"node1\", \"__label\":\"Julia\"},\n    {\"id\":\"node2\", \"__label\":\"Bob\"},\n  ],\n  links:[\n    {\"id\":\"link1\", \"source\":\"node1\", \"target\":\"node2\"}\n  ]\n}\n\nexport class Network extends React.Component<{}, {}> {\n  render() {\n    return <SizeMe\n      monitorHeight\n      refreshRate={32}\n    >{\n      ({ size }) => <ForceGraph2D\n        width={size.width || 100} height={size.height || 100}\n        graphData={exampleData}\n        />\n      }</SizeMe>\n  }\n}\n","import { ResponsiveLineCanvas } from \"@nivo/line\";\nimport React from \"react\";\n\ntype Point = { x: number, y: number };\ntype SineWaveProps = {\n\ta: Point[],\n\tb: Point[]\n};\n\nexport class SineWave extends React.Component<SineWaveProps, {}> {\n\trender() {\n\t\tconst margin = 50;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<ResponsiveLineCanvas\n\t\t\t\t\tdata={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"a\",\n\t\t\t\t\t\t\tcolor: \"rgb(255, 0, 0)\",\n\t\t\t\t\t\t\tdata: this.props.a\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"b\",\n\t\t\t\t\t\t\tcolor: \"rgb(0, 255, 0)\",\n\t\t\t\t\t\t\tdata: this.props.b\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t\taxisLeft={{legend: \"Activation\", legendPosition: \"middle\", legendOffset: -40}}\n\t\t\t\t\taxisBottom={{legend: \"Time\", legendPosition: \"middle\", legendOffset: 40}}\n\t\t\t\t\tenablePoints={false}\n\t\t\t\t\tenableGridX={true}\n\t\t\t\t\tenableGridY={true}\n\t\t\t\t\tcolors={[\"#137cbd\", \"#0f9960\"]}\n\t\t\t\t\ttheme={{textColor: \"#137cbd\", grid: {line: {stroke: \"#141414\"}}}}\n\t\t\t\t\tmargin={{top: margin, bottom: margin, left: margin, right: margin}}\n\t\t\t\t\txScale={{min: (this.props.a[0] || {x: 0}).x, max: 30, type: \"linear\"}}\n\t\t\t\t\tyScale={{max: 1, min: 0, type: \"linear\"}}\n\t\t\t\t\tisInteractive={false}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t);\n\t}\n}\n","import React from \"react\"\nimport \"./index.css\"\n\ntype Point = {x: number, y: number};\ntype PhasePortaitProps = {\n  data: number[][][],\n  points: number[][],\n  margin: number,\n  onChangeStart: (point: Point) => void\n};\n\nexport class PhasePortrait extends React.Component<PhasePortaitProps, {}> {\n  private canvasRef: React.RefObject<HTMLCanvasElement>;\n  private divRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: PhasePortaitProps) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.divRef = React.createRef();\n  }\n\n  render() {\n    const element = (\n      <div ref={this.divRef} className=\"PhasePortrait-div\">\n        <canvas ref={this.canvasRef} onClick={this.click.bind(this)}></canvas>\n      </div>\n    );\n\n    this.draw();\n\n    return element\n  }\n\n  screenToGraphSpace(position: Point): Point {\n    const canvas = this.canvasRef.current;\n    if (!canvas) return {x: 0.5, y: 0.5};\n    const center = { x: canvas.width / 2, y: canvas.height / 2 };\n    const click = {\n      x: position.x - canvas.offsetLeft,\n      y: position.y - canvas.offsetTop\n    };\n    const offset = { x: click.x - center.x, y: click.y - center.y };\n    const size = Math.min(canvas.width, canvas.height) - 2 * this.props.margin;\n    return { x: 0.5 + offset.x / size, y: 0.5 - offset.y / size };\n  }\n\n  click(event: React.MouseEvent<HTMLCanvasElement>) {\n    const pos = this.screenToGraphSpace({x: event.clientX, y: event.clientY});\n    this.props.onChangeStart(pos);\n  }\n\n  draw() {\n    const canvas = this.canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    const width = canvas.width, height = canvas.height;\n    const size = Math.min(width, height) - 2 * this.props.margin;\n    context.clearRect(0, 0, width, height);\n\n    const origin = {x: (width - size) / 2, y: (height - size) / 2};\n    context.translate(origin.x, origin.y);\n    context.scale(size, size);\n\n    context.lineWidth = 1.0 / size;\n    context.beginPath();\n    for (let t = 0; t < 1; t += 0.1) {\n      context.moveTo(0, t);\n      context.lineTo(1, t);\n      context.moveTo(t, 0);\n      context.lineTo(t, 1);\n    }\n    context.strokeStyle = \"#141414\";\n    context.stroke();\n\n    context.beginPath();\n    this.props.data.forEach((row, y) => {\n      // if (y != 10) return;\n      row.forEach((point, x) => {\n        context.moveTo(x / 20, 1 - y / 20);\n        context.lineTo(x / 20 + point[0] / 40, 1 - (y / 20 + point[1] / 40));\n      });\n    });\n    context.strokeStyle = \"#808080\";\n    context.stroke();\n\n    if (this.props.points.length) {\n      context.beginPath();\n      let pos = this.props.points[0];\n      context.moveTo(pos[0], 1 - pos[1]);\n      for (const point of this.props.points) {\n        context.lineTo(point[0], 1 - point[1]);\n      }\n      context.strokeStyle = \"#d9822b\";\n      context.stroke();\n    }\n\n    context.resetTransform();\n\n    context.lineWidth = 0.5;\n    context.translate(origin.x, origin.y);\n    const y = {x: -25, y: 5};\n    const x = {x: -8, y: 15};\n    for (let t = 0; t < 1.0; t += 0.1) {\n      const p = t.toFixed(1).toString();\n      context.strokeStyle = \"#0f9960\";\n      context.strokeText(p, y.x, y.y + (1-t) * size);\n      context.strokeStyle = \"#137cbd\";\n      context.strokeText(p, x.x + t * size, x.y + size);\n    }\n\n    context.resetTransform();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current!;\n    const div = this.divRef.current!;\n    const component = this;\n    function resize() {\n      canvas.width = div.clientWidth;\n      canvas.height = div.clientHeight;\n      canvas.style.width = canvas.width + \"px\";\n      canvas.style.height = canvas.height + \"px\";\n      component.draw();\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n  }\n}\n","export type Point = [number, number];\n\nexport function inverseSigmoid(z: number): number {\n  const x = Math.min(Math.max(z, 0.01), 0.99);\n  return Math.log(x / (1 - x));\n}\n\nexport function getField(steps: number = 20): Point[][] {\n  const field = [];\n  for (let y = 0; y <= steps; y++) {\n    const row: Point[] = [];\n    let value = inverseSigmoid(y / steps);\n    for (let x = 0; x <= steps; x++) {\n      row[x] = [inverseSigmoid(x / steps), value];\n    }\n    field[y] = row;\n  }\n  return field;\n}\n","import React from 'react';\nimport './App.css';\nimport { Card, Elevation } from '@blueprintjs/core';\nimport { Settings, Structure } from './components/Settings';\nimport { Network } from './components/Network';\nimport { SineWave } from './components/SineWave';\nimport { Ctrnn, Node } from 'ctrnn.js';\nimport { PhasePortrait } from './components/PhasePortrait';\nimport { getField } from \"./sigmoid\";\n\nconst field = getField();\n\ntype Point = { x: number, y: number };\ntype AppState = {\n  frame: number,\n  ctrnn: Structure,\n  data: { a: Point[], b: Point[] },\n  fixed: { a: Point[], b: Point[] },\n  phaseData: number[][][],\n  points: number[][],\n  stepsize: number\n}\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    frame: 0,\n    data: { a: [], b: [] },\n    fixed: { a: [], b: [] },\n    phaseData: [],\n    points: [],\n    stepsize: 0.1,\n    ctrnn: {\n      nodes: [\n        { bias: -2.75, timeConstant: 1.0 },\n        { bias: -1.75, timeConstant: 1.0 },\n      ],\n      weights: [\n        [4.5, 1.0],\n        [-1.0, 4.5]\n      ]\n    }\n  };\n  private ctrnn: Ctrnn = new Ctrnn(2);\n  private paused: boolean = false;\n  private start: number[] = [0.05, 0.15];\n  private animating: boolean = false;\n\n  updateNetwork(ctrnn: Ctrnn) {\n    this.state.ctrnn.nodes.forEach((node, index) => {\n      ctrnn.setNode(index, node);\n    });\n    this.state.ctrnn.weights.forEach((weights, to) => {\n      weights.forEach((weight, from) => {\n        ctrnn.setWeight(from, to, weight);\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateNetwork(this.ctrnn);\n    this.update();\n  }\n\n  onClick() {\n    this.paused = !this.paused;\n  }\n\n  onChangeNode(id: number, node: Node) {\n    this.state.ctrnn.nodes[id] = node;\n    this.ctrnn.setNode(id, node);\n    this.update();\n  }\n\n  onChangeWeight(from: number, to: number, weight: number) {\n    this.state.ctrnn.weights[to][from] = weight;\n    this.ctrnn.setWeight(from, to, weight);\n    this.update();\n  }\n\n  onChangeStart(point: Point) {\n    const app = this;\n    const old = this.start;\n    const offset = [point.x - old[0], point.y - old[1]];\n    const dist = Math.hypot(offset[0], offset[1]);\n    const duration = Math.max(Math.round(dist * 25), 5);\n    let t = 1;\n    if (this.animating) return;\n    this.animating = true;\n    function animate() {\n      const p = Math.pow(t / duration, 2);\n      app.start = [old[0] + offset[0] * p, old[1] + offset[1] * p];\n      app.update();\n      if (t++ < duration) requestAnimationFrame(animate);\n      else app.animating = false;\n    }\n    requestAnimationFrame(animate);\n  }\n\n  onChangeStepsize(value: number) {\n    this.setState({stepsize: value});\n    this.update();\n  }\n\n  updateFixed() {\n    let ctrnn = new Ctrnn(2);\n    this.updateNetwork(ctrnn);\n    const data: { a: Point[], b: Point[] } = {a: [], b: []};\n    const points: number[][] = [];\n    let frame = ctrnn.frameFromOutput(this.start);\n    const initial = ctrnn.getOutputs(frame);\n    data.a.push({x: 0, y: initial[0]});\n    data.b.push({x: 0, y: initial[1]});\n    points.push(initial);\n    let last_x = 0, s = this.state.stepsize;\n    for (let i = s; i <= 30; i += s) {\n      frame = ctrnn.tick(frame, [], this.state.stepsize);\n      const outputs = ctrnn.getOutputs(frame);\n      const x = Math.floor(i * 100) / 100;\n      if (x > last_x) {\n        last_x = x;\n        data.a.push({x: x, y: outputs[0]});\n        data.b.push({x: x, y: outputs[1]});\n        points.push(outputs);\n      }\n    }\n\n    frame = ctrnn.tick(frame, [], this.state.stepsize);\n    const last = [data.a[data.a.length - 1], data.b[data.b.length - 1]];\n    const outputs = ctrnn.getOutputs(frame);\n    const next = []\n    const left = (30 - last_x) / s;\n    console.log(left);\n    for (let i = 0; i < frame.length; i++) {\n      console.log(last[i].x, outputs[i]);\n      next.push(last[i].y + (outputs[i] - last[i].y) * left);\n    }\n    data.a.push({x: 30, y: next[0]});\n    data.b.push({x: 30, y: next[1]});\n    points.push(outputs);\n\n    this.setState({fixed: data, points: points});\n  }\n\n  updatePhase() {\n    let ctrnn = new Ctrnn(2);\n    this.updateNetwork(ctrnn);\n    const data: number[][][] = [];\n    field.forEach((row, y) => {\n      const line: number[][] = [];\n      row.forEach((point, x) => {\n        const biased = [\n          point[0] - this.state.ctrnn.nodes[0].bias,\n          point[1] - this.state.ctrnn.nodes[1].bias\n        ];\n        const control = ctrnn.getOutputs(biased);\n        const frame = ctrnn.tick(biased, [], this.state.stepsize);\n        const outputs = ctrnn.getOutputs(frame);\n        const diff = [outputs[0] - control[0], outputs[1] - control[1]];\n        const mag = Math.hypot(diff[0], diff[1]);\n        // const sqr = Math.sqrt(mag);\n        line.push([diff[0] / mag, diff[1] / mag]);\n      });\n      data.push(line);\n    });\n    this.setState({phaseData: data});\n  }\n\n  update() {\n    this.updateFixed();\n    this.updatePhase();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Dashboard\">\n          <div className=\"Settings\">\n            <Card elevation={Elevation.ZERO}>\n              <Settings\n                ctrnn={this.state.ctrnn}\n                onChangeNode={this.onChangeNode.bind(this)}\n                onChangeWeight={this.onChangeWeight.bind(this)}\n                onChangeStepsize={this.onChangeStepsize.bind(this)}\n                stepsize={this.state.stepsize}\n              />\n            </Card>\n          </div>\n          <div className=\"Network\">\n            <Card elevation={Elevation.ZERO}>\n              <Network />\n            </Card>\n          </div>\n          <div className=\"SineWave\">\n            <Card elevation={Elevation.ZERO}>\n              <SineWave a={this.state.fixed.a} b={this.state.fixed.b} />\n            </Card>\n          </div>\n          <div className=\"PhasePortrait\">\n            <Card elevation={Elevation.ZERO}>\n              <PhasePortrait margin={15} data={this.state.phaseData}\n                points={this.state.points}\n                onChangeStart={this.onChangeStart.bind(this)} />\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}