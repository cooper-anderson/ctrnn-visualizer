{"version":3,"sources":["../../../../../git/ctrnn.js/lib/index.js","../../../../../git/ctrnn.js/lib/ctrnn.js","../../../../../git/ctrnn.js/lib/sigmoid.js","components/Settings/index.tsx","components/Network/index.tsx","components/SineWave/index.tsx","components/PhasePortrait/index.tsx","sigmoid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Object","defineProperty","exports","value","Ctrnn","ctrnn_1","require","enumerable","get","__assign","this","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","sigmoid_1","nodes","opts","Array","from","bias","timeConstant","weights","configurable","setNode","index","node","setWeight","to","weight","getOutput","frame","sigmoid","getOutputs","size","Error","map","tick","inputs","dt","final","push","getDelta","sum","j","activation","newFrame","z","Math","pow","exp","Settings","colors","Intent","PRIMARY","SUCCESS","label","props","ctrnn","id","min","max","stepSize","intent","onChange","onChangeNode","labelStepSize","onChangeWeight","icon","title","className","React","Component","exampleData","links","Network","monitorHeight","refreshRate","width","height","graphData","SineWave","data","color","a","b","enablePoints","enableGridX","enableGridY","theme","textColor","grid","line","stroke","margin","top","bottom","left","right","xScale","x","type","yScale","isInteractive","PhasePortrait","canvasRef","divRef","createRef","element","ref","draw","canvas","current","context","getContext","clearRect","origin","y","translate","scale","lineWidth","beginPath","moveTo","lineTo","strokeStyle","forEach","row","point","h","resetTransform","toFixed","toString","strokeText","div","component","resize","clientWidth","clientHeight","style","window","addEventListener","inverseSigmoid","log","field","steps","getField","App","state","fixed","phaseData","paused","updateNetwork","update","outputs","setState","control","diff","mag","hypot","updateFixed","updatePhase","elevation","Elevation","ZERO","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8047887.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ctrnn = void 0;\nvar ctrnn_1 = require(\"./ctrnn\");\nObject.defineProperty(exports, \"Ctrnn\", { enumerable: true, get: function () { return ctrnn_1.Ctrnn; } });\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ctrnn = void 0;\nvar sigmoid_1 = require(\"./sigmoid\");\n/**\n * Continuous-Time Recurrent Neural Network (`CTRNN`) implementation for JS.\n *\n * # Example\n *\n * ```typescript\n * import Ctrnn from \"ctrnn.js\";\n * let ctrnn = new Ctrnn();\n * ```\n */\nvar Ctrnn = /** @class */ (function () {\n    function Ctrnn(nodes) {\n        if (nodes === void 0) { nodes = 4; }\n        var opts = { length: nodes };\n        this.nodes = Array.from(opts, function () { return ({ bias: 0, timeConstant: 1.0 }); });\n        this.weights = Array.from(opts, function () { return Array.from(opts, function () { return 0; }); });\n    }\n    Object.defineProperty(Ctrnn.prototype, \"size\", {\n        /**\n         * Get the number of nodes in the network\n         */\n        get: function () { return this.nodes.length; },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Set the `bias` and `timeConstant` parameters of a given node\n     */\n    Ctrnn.prototype.setNode = function (index, node) {\n        this.nodes[index] = __assign(__assign({}, this.nodes[index]), node);\n    };\n    /**\n     * Set the the given weight from one node to another\n     */\n    Ctrnn.prototype.setWeight = function (from, to, weight) {\n        this.weights[to][from] = weight;\n    };\n    /**\n     * Get the output activation of a specific node\n     */\n    Ctrnn.prototype.getOutput = function (frame, node) {\n        return sigmoid_1.sigmoid(frame[node] + this.nodes[node].bias);\n    };\n    /**\n     * Get the output activations of all nodes\n     */\n    Ctrnn.prototype.getOutputs = function (frame) {\n        if (frame.length != this.size)\n            throw new Error();\n        return this.nodes.map(function (node, index) { return sigmoid_1.sigmoid(frame[index] + node.bias); });\n    };\n    // TODO: Documentation\n    Ctrnn.prototype.tick = function (frame, inputs, dt) {\n        var final = [];\n        for (var i = 0; i < this.size; i++) {\n            final.push(inputs[i] || (frame[i] + this.getDelta(frame, i) * dt));\n        }\n        return final;\n    };\n    // TODO: Documentation\n    Ctrnn.prototype.getDelta = function (frame, node) {\n        var weights = this.weights[node];\n        var sum = 0;\n        for (var j = 0; j < this.size; j++) {\n            var activation = sigmoid_1.sigmoid(frame[j] + this.nodes[j].bias);\n            sum += weights[j] * activation;\n        }\n        return (sum - frame[node]) / this.nodes[node].timeConstant;\n    };\n    Ctrnn.newFrame = function (size) {\n        return Array.from({ length: size }, function () { return 0.0; });\n    };\n    return Ctrnn;\n}());\nexports.Ctrnn = Ctrnn;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sigmoid = void 0;\nfunction sigmoid(z) {\n    return Math.pow(1 + Math.exp(-z), -1);\n}\nexports.sigmoid = sigmoid;\n","import { Callout, FormGroup, Intent, Slider, Text } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { Node } from 'ctrnn.js';\nimport \"./index.css\";\n\nexport type Structure = {\n  nodes: Node[],\n  weights: number[][]\n}\n\ntype SettingsProps = {\n  onChangeNode: (id: number, node: Node) => void,\n  onChangeWeight: (from: number, to: number, weight: number) => void,\n  ctrnn: Structure\n};\n\nexport class Settings extends React.Component<SettingsProps, {}> {\n  render() {\n    const colors = [Intent.PRIMARY, Intent.SUCCESS];\n    return <>\n      <FormGroup\n        label=\"Node Biases\"\n      >\n        {this.props.ctrnn.nodes.map((node, id) =>\n          <Slider key={id} value={node.bias}\n            min={-3.0} max={3.0} stepSize={0.001}\n            intent={colors[id]}\n            onChange={value => {\n              this.props.onChangeNode(id,\n                {timeConstant: node.timeConstant, bias: value}\n              );\n            }}\n            />\n        )}\n      </FormGroup>\n      <FormGroup\n        label=\"Node Time Constants\"\n      >\n        {this.props.ctrnn.nodes.map((node, id) =>\n          <Slider key={id} value={node.timeConstant}\n            min={0.001} max={2.0} stepSize={0.001}\n            intent={colors[id]}\n            onChange={value => {\n              this.props.onChangeNode(id,\n                {timeConstant: value, bias: node.bias}\n              );\n            }}\n            />\n        )}\n      </FormGroup>\n      {this.props.ctrnn.weights.map((weights, to) =>\n        <FormGroup\n          label={`Incoming weights to Node ${to}`}\n        >\n          {weights.map((weight, from) =>\n            <Slider key={from + '-' + to} value={weight}\n              labelStepSize={2.5} intent={colors[from]}\n              min={-5.0} max={5.0} stepSize={0.001}\n              onChange={value => {\n                this.props.onChangeWeight(from, to, value);\n              }}\n              />\n          )}\n        </FormGroup>\n      )}\n      <Callout\n        icon=\"help\"\n        title=\"Information\"\n      >\n        <Text className=\"information\">\n\n        </Text>\n      </Callout>\n      </>\n  }\n}\n","import React from \"react\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport { SizeMe } from \"react-sizeme\";\n\nconst exampleData = {\n  nodes:[\n    {\"id\":\"node1\", \"__label\":\"Julia\"},\n    {\"id\":\"node2\", \"__label\":\"Bob\"},\n  ],\n  links:[\n    {\"id\":\"link1\", \"source\":\"node1\", \"target\":\"node2\"}\n  ]\n}\n\nexport class Network extends React.Component<{}, {}> {\n  render() {\n    return <SizeMe\n      monitorHeight\n      refreshRate={32}\n    >{\n      ({ size }) => <ForceGraph2D\n        width={size.width || 100} height={size.height || 100}\n        graphData={exampleData}\n        />\n      }</SizeMe>\n  }\n}\n","import { ResponsiveLineCanvas } from \"@nivo/line\";\nimport React from \"react\";\n\ntype Point = { x: number, y: number };\ntype SineWaveProps = {\n\ta: Point[],\n\tb: Point[]\n};\n\nexport class SineWave extends React.Component<SineWaveProps, {}> {\n\trender() {\n\t\tconst margin = 50;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<ResponsiveLineCanvas\n\t\t\t\t\tdata={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"a\",\n\t\t\t\t\t\t\tcolor: \"rgb(255, 0, 0)\",\n\t\t\t\t\t\t\tdata: this.props.a\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"b\",\n\t\t\t\t\t\t\tcolor: \"rgb(0, 255, 0)\",\n\t\t\t\t\t\t\tdata: this.props.b\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t\tenablePoints={false}\n\t\t\t\t\tenableGridX={true}\n\t\t\t\t\tenableGridY={true}\n\t\t\t\t\tcolors={[\"#137cbd\", \"#0f9960\"]}\n\t\t\t\t\ttheme={{textColor: \"#137cbd\", grid: {line: {stroke: \"#141414\"}}}}\n\t\t\t\t\tmargin={{top: margin, bottom: margin, left: margin, right: margin}}\n\t\t\t\t\txScale={{min: (this.props.a[0] || {x: 0}).x, type: \"linear\"}}\n\t\t\t\t\tyScale={{max: 1, min: 0, type: \"linear\"}}\n\t\t\t\t\tisInteractive={false}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t);\n\t}\n}\n","import React from \"react\"\nimport \"./index.css\"\n\ntype PhasePortaitProps = {\n  data: number[][][],\n  margin: number\n};\n\nexport class PhasePortrait extends React.Component<PhasePortaitProps, {}> {\n  private canvasRef: React.RefObject<HTMLCanvasElement>;\n  private divRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: PhasePortaitProps) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.divRef = React.createRef();\n  }\n\n  render() {\n    const element = (\n      <div ref={this.divRef} className=\"PhasePortrait-div\">\n        <canvas ref={this.canvasRef}></canvas>\n      </div>\n    );\n\n    this.draw();\n\n    return element\n  }\n\n  draw() {\n    const canvas = this.canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    const width = canvas.width, height = canvas.height;\n    const size = Math.min(width, height) - 2 * this.props.margin;\n    context.clearRect(0, 0, width, height);\n\n    const origin = {x: (width - size) / 2, y: (height - size) / 2};\n    context.translate(origin.x, origin.y);\n    context.scale(size, size);\n\n    context.lineWidth = 1.0 / size;\n    context.beginPath();\n    for (let t = 0; t < 1; t += 0.1) {\n      context.moveTo(0, t);\n      context.lineTo(1, t);\n      context.moveTo(t, 0);\n      context.lineTo(t, 1);\n    }\n    context.strokeStyle = \"#141414\";\n    context.stroke();\n\n    context.beginPath();\n    this.props.data.forEach((row, y) => {\n      row.forEach((point, x) => {\n        let h = (20 - y) / 20;\n        context.moveTo(x / 20, h);\n        context.lineTo(x / 20 + point[0] / 40, h - point[1] / 40);\n      });\n    });\n    context.strokeStyle = \"#808080\";\n    context.stroke();\n\n    context.resetTransform();\n\n    context.lineWidth = 0.5;\n    context.translate(origin.x, origin.y);\n    const y = {x: -25, y: 5};\n    const x = {x: -8, y: 15};\n    for (let t = 0; t < 1.0; t += 0.1) {\n      const p = t.toFixed(1).toString();\n      context.strokeStyle = \"#0f9960\";\n      context.strokeText(p, y.x, y.y + (1-t) * size);\n      context.strokeStyle = \"#137cbd\";\n      context.strokeText(p, x.x + t * size, x.y + size);\n    }\n\n    context.resetTransform();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current!;\n    const div = this.divRef.current!;\n    const component = this;\n    function resize() {\n      canvas.width = div.clientWidth;\n      canvas.height = div.clientHeight;\n      canvas.style.width = canvas.width + \"px\";\n      canvas.style.height = canvas.height + \"px\";\n      component.draw();\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n  }\n}\n","export type Point = [number, number];\n\nexport function inverseSigmoid(z: number): number {\n  const x = Math.min(Math.max(z, 0.01), 0.99);\n  return Math.log(x / (1 - x));\n}\n\nexport function getField(steps: number = 20): Point[][] {\n  const field = [];\n  for (let y = 0; y <= steps; y++) {\n    const row: Point[] = [];\n    let value = inverseSigmoid(y / steps);\n    for (let x = 0; x <= steps; x++) {\n      row[x] = [inverseSigmoid(x / steps), value];\n    }\n    field[y] = row;\n  }\n  return field;\n}\n","import React from 'react';\nimport './App.css';\nimport { Card, Elevation } from '@blueprintjs/core';\nimport { Settings, Structure } from './components/Settings';\nimport { Network } from './components/Network';\nimport { SineWave } from './components/SineWave';\nimport { Ctrnn, Node } from 'ctrnn.js';\nimport { PhasePortrait } from './components/PhasePortrait';\nimport { getField } from \"./sigmoid\";\n\nconst field = getField();\n\ntype Point = { x: number, y: number };\ntype AppState = {\n  frame: number,\n  ctrnn: Structure,\n  data: { a: Point[], b: Point[] },\n  fixed: { a: Point[], b: Point[] },\n  phaseData: number[][][]\n}\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    frame: 0,\n    data: { a: [], b: [] },\n    fixed: { a: [], b: [] },\n    phaseData: [],\n    ctrnn: {\n      nodes: [\n        { bias: -2.75, timeConstant: 1.0 },\n        { bias: -1.75, timeConstant: 1.0 },\n      ],\n      weights: [\n        [4.5, 1.0],\n        [-1.0, 4.5]\n      ]\n    }\n  };\n  private ctrnn: Ctrnn = new Ctrnn(2);\n  private paused: boolean = false;\n\n  updateNetwork(ctrnn: Ctrnn) {\n    this.state.ctrnn.nodes.forEach((node, index) => {\n      ctrnn.setNode(index, node);\n    });\n    this.state.ctrnn.weights.forEach((weights, to) => {\n      weights.forEach((weight, from) => {\n        ctrnn.setWeight(from, to, weight);\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.updateNetwork(this.ctrnn);\n    this.update();\n  }\n\n  onClick() {\n    this.paused = !this.paused;\n  }\n\n  onChangeNode(id: number, node: Node) {\n    this.state.ctrnn.nodes[id] = node;\n    this.ctrnn.setNode(id, node);\n    this.update();\n  }\n\n  onChangeWeight(from: number, to: number, weight: number) {\n    this.state.ctrnn.weights[to][from] = weight;\n    this.ctrnn.setWeight(from, to, weight);\n    this.update();\n  }\n\n  updateFixed() {\n    let ctrnn = new Ctrnn(2);\n    this.updateNetwork(ctrnn);\n    const data: { a: Point[], b: Point[] } = {a: [], b: []};\n    let frame = [0, 0];\n    for (let i = 0; i < 500; i++) {\n      frame = ctrnn.tick(frame, [], 0.2);\n      if (i % 5 === 0) {\n        const outputs = ctrnn.getOutputs(frame);\n        data.a.push({x: i, y: outputs[0]});\n        data.b.push({x: i, y: outputs[1]});\n      }\n    }\n    this.setState({fixed: data});\n  }\n\n  updatePhase() {\n    let ctrnn = new Ctrnn(2);\n    this.updateNetwork(ctrnn);\n    const data: number[][][] = [];\n    field.forEach((row, y) => {\n      const line: number[][] = [];\n      row.forEach((point, x) => {\n        const control = ctrnn.getOutputs(point);\n        const frame = ctrnn.tick(point, [], 0.2);\n        const outputs = ctrnn.getOutputs(frame);\n        const diff = [outputs[0] - control[0], outputs[1] - control[1]];\n        const mag = Math.hypot(diff[0], diff[1]);\n        // const sqr = Math.sqrt(mag);\n        line.push([diff[0] / mag, diff[1] / mag]);\n      });\n      data.push(line);\n    });\n    this.setState({phaseData: data});\n  }\n\n  update() {\n    this.updateFixed();\n    this.updatePhase();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Dashboard\">\n          <div className=\"Settings\">\n            <Card elevation={Elevation.ZERO}>\n              <Settings\n                ctrnn={this.state.ctrnn}\n                onChangeNode={this.onChangeNode.bind(this)}\n                onChangeWeight={this.onChangeWeight.bind(this)}\n              />\n            </Card>\n          </div>\n          <div className=\"Network\">\n            <Card elevation={Elevation.ZERO}>\n              <Network />\n            </Card>\n          </div>\n          <div className=\"SineWave\">\n            <Card elevation={Elevation.ZERO}>\n              <SineWave a={this.state.fixed.a} b={this.state.fixed.b} />\n            </Card>\n          </div>\n          <div className=\"PhasePortrait\">\n            <Card elevation={Elevation.ZERO}>\n              <PhasePortrait margin={15} data={this.state.phaseData} />\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}